// generated by 'github.com/sacloud/libsacloud/internal/tools/gen-api-op'; DO NOT EDIT

package sacloud

import (
	"context"
	"encoding/json"
)

// CDROMOp implements CDROMAPI interface
type CDROMOp struct {
	// Client APICaller
	Client APICaller
	// PathSuffix is used when building URL
	PathSuffix string
	// PathName is used when building URL
	PathName string
}

// NewCDROMOp creates new CDROMOp instance
func NewCDROMOp(client APICaller) *CDROMOp {
	return &CDROMOp{
		Client:     client,
		PathSuffix: "api/cloud/1.1",
		PathName:   "cdrom",
	}
}

// Find is API call
func (o *CDROMOp) Find(ctx context.Context, zone string, conditions *FindCondition) ([]*CDROM, error) {
	url, err := buildURL("{{.rootURL}}/{{.zone}}/{{.pathSuffix}}/{{.pathName}}", map[string]interface{}{
		"rootURL":    SakuraCloudAPIRoot,
		"pathSuffix": o.PathSuffix,
		"pathName":   o.PathName,
		"zone":       zone,
		"conditions": conditions,
	})
	if err != nil {
		return nil, err
	}

	var body interface{}
	{
		if body == nil {
			body = &CDROMFindRequestEnvelope{}
		}
		v := body.(*CDROMFindRequestEnvelope)
		v.Count = conditions.Count
		v.From = conditions.From
		v.Sort = conditions.Sort
		v.Filter = conditions.Filter
		v.Include = conditions.Include
		v.Exclude = conditions.Exclude
		body = v
	}

	data, err := o.Client.Do(ctx, "GET", url, body)
	if err != nil {
		return nil, err
	}

	nakedResponse := &CDROMFindResponseEnvelope{}
	if err := json.Unmarshal(data, nakedResponse); err != nil {
		return nil, err
	}

	var payload0 []*CDROM
	for _, v := range nakedResponse.CDROMs {
		payload := &CDROM{}
		if err := payload.parseNaked(v); err != nil {
			return nil, err
		}
		payload0 = append(payload0, payload)
	}
	return payload0, nil
}

// Create is API call
func (o *CDROMOp) Create(ctx context.Context, zone string, param *CDROMCreateRequest) (*CDROM, *FTPServer, error) {
	url, err := buildURL("{{.rootURL}}/{{.zone}}/{{.pathSuffix}}/{{.pathName}}", map[string]interface{}{
		"rootURL":    SakuraCloudAPIRoot,
		"pathSuffix": o.PathSuffix,
		"pathName":   o.PathName,
		"zone":       zone,
		"param":      param,
	})
	if err != nil {
		return nil, nil, err
	}

	var body interface{}
	{
		if body == nil {
			body = &CDROMCreateRequestEnvelope{}
		}
		v := body.(*CDROMCreateRequestEnvelope)
		n, err := param.toNaked()
		if err != nil {
			return nil, nil, err
		}
		v.CDROM = n
		body = v
	}

	data, err := o.Client.Do(ctx, "POST", url, body)
	if err != nil {
		return nil, nil, err
	}

	nakedResponse := &CDROMCreateResponseEnvelope{}
	if err := json.Unmarshal(data, nakedResponse); err != nil {
		return nil, nil, err
	}

	payload0 := &CDROM{}
	if err := payload0.parseNaked(nakedResponse.CDROM); err != nil {
		return nil, nil, err
	}
	payload1 := &FTPServer{}
	if err := payload1.parseNaked(nakedResponse.FTPServer); err != nil {
		return nil, nil, err
	}
	return payload0, payload1, nil
}

// Read is API call
func (o *CDROMOp) Read(ctx context.Context, zone string, id int64) (*CDROM, error) {
	url, err := buildURL("{{.rootURL}}/{{.zone}}/{{.pathSuffix}}/{{.pathName}}/{{.id}}", map[string]interface{}{
		"rootURL":    SakuraCloudAPIRoot,
		"pathSuffix": o.PathSuffix,
		"pathName":   o.PathName,
		"zone":       zone,
		"id":         id,
	})
	if err != nil {
		return nil, err
	}

	var body interface{}

	data, err := o.Client.Do(ctx, "GET", url, body)
	if err != nil {
		return nil, err
	}

	nakedResponse := &CDROMReadResponseEnvelope{}
	if err := json.Unmarshal(data, nakedResponse); err != nil {
		return nil, err
	}

	payload0 := &CDROM{}
	if err := payload0.parseNaked(nakedResponse.CDROM); err != nil {
		return nil, err
	}
	return payload0, nil
}

// Update is API call
func (o *CDROMOp) Update(ctx context.Context, zone string, id int64, param *CDROMUpdateRequest) (*CDROM, error) {
	url, err := buildURL("{{.rootURL}}/{{.zone}}/{{.pathSuffix}}/{{.pathName}}/{{.id}}", map[string]interface{}{
		"rootURL":    SakuraCloudAPIRoot,
		"pathSuffix": o.PathSuffix,
		"pathName":   o.PathName,
		"zone":       zone,
		"id":         id,
		"param":      param,
	})
	if err != nil {
		return nil, err
	}

	var body interface{}
	{
		if body == nil {
			body = &CDROMUpdateRequestEnvelope{}
		}
		v := body.(*CDROMUpdateRequestEnvelope)
		n, err := param.toNaked()
		if err != nil {
			return nil, err
		}
		v.CDROM = n
		body = v
	}

	data, err := o.Client.Do(ctx, "PUT", url, body)
	if err != nil {
		return nil, err
	}

	nakedResponse := &CDROMUpdateResponseEnvelope{}
	if err := json.Unmarshal(data, nakedResponse); err != nil {
		return nil, err
	}

	payload0 := &CDROM{}
	if err := payload0.parseNaked(nakedResponse.CDROM); err != nil {
		return nil, err
	}
	return payload0, nil
}

// Delete is API call
func (o *CDROMOp) Delete(ctx context.Context, zone string, id int64) error {
	url, err := buildURL("{{.rootURL}}/{{.zone}}/{{.pathSuffix}}/{{.pathName}}/{{.id}}", map[string]interface{}{
		"rootURL":    SakuraCloudAPIRoot,
		"pathSuffix": o.PathSuffix,
		"pathName":   o.PathName,
		"zone":       zone,
		"id":         id,
	})
	if err != nil {
		return err
	}

	var body interface{}

	_, err = o.Client.Do(ctx, "DELETE", url, body)
	if err != nil {
		return err
	}

	return nil
}
