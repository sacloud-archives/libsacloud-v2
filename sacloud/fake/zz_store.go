// generated by 'github.com/sacloud/libsacloud/internal/tools/gen-fake-store'; DO NOT EDIT

package fake

import (
	"github.com/sacloud/libsacloud-v2/sacloud"
	"github.com/sacloud/libsacloud-v2/sacloud/types"
)

func (s *store) getArchive(zone string) []*sacloud.Archive {
	values := s.get("Archive", zone)
	var ret []*sacloud.Archive
	for _, v := range values {
		if v, ok := v.(*sacloud.Archive); ok {
			ret = append(ret, v)
		}
	}
	return ret
}

func (s *store) getArchiveByID(zone string, id types.ID) *sacloud.Archive {
	v := s.getByID("Archive", zone, id)
	if v, ok := v.(*sacloud.Archive); ok {
		return v
	}
	return nil
}

func (s *store) setArchive(zone string, value *sacloud.Archive) {
	s.set("Archive", zone, value)
}

func (s *store) getCDROM(zone string) []*sacloud.CDROM {
	values := s.get("CDROM", zone)
	var ret []*sacloud.CDROM
	for _, v := range values {
		if v, ok := v.(*sacloud.CDROM); ok {
			ret = append(ret, v)
		}
	}
	return ret
}

func (s *store) getCDROMByID(zone string, id types.ID) *sacloud.CDROM {
	v := s.getByID("CDROM", zone, id)
	if v, ok := v.(*sacloud.CDROM); ok {
		return v
	}
	return nil
}

func (s *store) setCDROM(zone string, value *sacloud.CDROM) {
	s.set("CDROM", zone, value)
}

func (s *store) getDisk(zone string) []*sacloud.Disk {
	values := s.get("Disk", zone)
	var ret []*sacloud.Disk
	for _, v := range values {
		if v, ok := v.(*sacloud.Disk); ok {
			ret = append(ret, v)
		}
	}
	return ret
}

func (s *store) getDiskByID(zone string, id types.ID) *sacloud.Disk {
	v := s.getByID("Disk", zone, id)
	if v, ok := v.(*sacloud.Disk); ok {
		return v
	}
	return nil
}

func (s *store) setDisk(zone string, value *sacloud.Disk) {
	s.set("Disk", zone, value)
}

func (s *store) getGSLB(zone string) []*sacloud.GSLB {
	values := s.get("GSLB", zone)
	var ret []*sacloud.GSLB
	for _, v := range values {
		if v, ok := v.(*sacloud.GSLB); ok {
			ret = append(ret, v)
		}
	}
	return ret
}

func (s *store) getGSLBByID(zone string, id types.ID) *sacloud.GSLB {
	v := s.getByID("GSLB", zone, id)
	if v, ok := v.(*sacloud.GSLB); ok {
		return v
	}
	return nil
}

func (s *store) setGSLB(zone string, value *sacloud.GSLB) {
	s.set("GSLB", zone, value)
}

func (s *store) getInterface(zone string) []*sacloud.Interface {
	values := s.get("Interface", zone)
	var ret []*sacloud.Interface
	for _, v := range values {
		if v, ok := v.(*sacloud.Interface); ok {
			ret = append(ret, v)
		}
	}
	return ret
}

func (s *store) getInterfaceByID(zone string, id types.ID) *sacloud.Interface {
	v := s.getByID("Interface", zone, id)
	if v, ok := v.(*sacloud.Interface); ok {
		return v
	}
	return nil
}

func (s *store) setInterface(zone string, value *sacloud.Interface) {
	s.set("Interface", zone, value)
}

func (s *store) getLoadBalancer(zone string) []*sacloud.LoadBalancer {
	values := s.get("LoadBalancer", zone)
	var ret []*sacloud.LoadBalancer
	for _, v := range values {
		if v, ok := v.(*sacloud.LoadBalancer); ok {
			ret = append(ret, v)
		}
	}
	return ret
}

func (s *store) getLoadBalancerByID(zone string, id types.ID) *sacloud.LoadBalancer {
	v := s.getByID("LoadBalancer", zone, id)
	if v, ok := v.(*sacloud.LoadBalancer); ok {
		return v
	}
	return nil
}

func (s *store) setLoadBalancer(zone string, value *sacloud.LoadBalancer) {
	s.set("LoadBalancer", zone, value)
}

func (s *store) getNFS(zone string) []*sacloud.NFS {
	values := s.get("NFS", zone)
	var ret []*sacloud.NFS
	for _, v := range values {
		if v, ok := v.(*sacloud.NFS); ok {
			ret = append(ret, v)
		}
	}
	return ret
}

func (s *store) getNFSByID(zone string, id types.ID) *sacloud.NFS {
	v := s.getByID("NFS", zone, id)
	if v, ok := v.(*sacloud.NFS); ok {
		return v
	}
	return nil
}

func (s *store) setNFS(zone string, value *sacloud.NFS) {
	s.set("NFS", zone, value)
}

func (s *store) getNote(zone string) []*sacloud.Note {
	values := s.get("Note", zone)
	var ret []*sacloud.Note
	for _, v := range values {
		if v, ok := v.(*sacloud.Note); ok {
			ret = append(ret, v)
		}
	}
	return ret
}

func (s *store) getNoteByID(zone string, id types.ID) *sacloud.Note {
	v := s.getByID("Note", zone, id)
	if v, ok := v.(*sacloud.Note); ok {
		return v
	}
	return nil
}

func (s *store) setNote(zone string, value *sacloud.Note) {
	s.set("Note", zone, value)
}

func (s *store) getServer(zone string) []*sacloud.Server {
	values := s.get("Server", zone)
	var ret []*sacloud.Server
	for _, v := range values {
		if v, ok := v.(*sacloud.Server); ok {
			ret = append(ret, v)
		}
	}
	return ret
}

func (s *store) getServerByID(zone string, id types.ID) *sacloud.Server {
	v := s.getByID("Server", zone, id)
	if v, ok := v.(*sacloud.Server); ok {
		return v
	}
	return nil
}

func (s *store) setServer(zone string, value *sacloud.Server) {
	s.set("Server", zone, value)
}

func (s *store) getSwitch(zone string) []*sacloud.Switch {
	values := s.get("Switch", zone)
	var ret []*sacloud.Switch
	for _, v := range values {
		if v, ok := v.(*sacloud.Switch); ok {
			ret = append(ret, v)
		}
	}
	return ret
}

func (s *store) getSwitchByID(zone string, id types.ID) *sacloud.Switch {
	v := s.getByID("Switch", zone, id)
	if v, ok := v.(*sacloud.Switch); ok {
		return v
	}
	return nil
}

func (s *store) setSwitch(zone string, value *sacloud.Switch) {
	s.set("Switch", zone, value)
}

func (s *store) getZone(zone string) []*sacloud.Zone {
	values := s.get("Zone", zone)
	var ret []*sacloud.Zone
	for _, v := range values {
		if v, ok := v.(*sacloud.Zone); ok {
			ret = append(ret, v)
		}
	}
	return ret
}

func (s *store) getZoneByID(zone string, id types.ID) *sacloud.Zone {
	v := s.getByID("Zone", zone, id)
	if v, ok := v.(*sacloud.Zone); ok {
		return v
	}
	return nil
}

func (s *store) setZone(zone string, value *sacloud.Zone) {
	s.set("Zone", zone, value)
}
