// generated by 'github.com/sacloud/libsacloud/internal/tools/gen-api-tracer'; DO NOT EDIT

package sacloud

import (
	"context"
	"log"

	"github.com/sacloud/libsacloud-v2/sacloud/types"
)

/*************************************************
* ArchiveTracer
*************************************************/

// ArchiveTracer is for trace ArchiveOp operations
type ArchiveTracer struct {
	Internal ArchiveAPI
}

// NewArchiveTracer creates new ArchiveTracer instance
func NewArchiveTracer(in ArchiveAPI) *ArchiveTracer {
	return &ArchiveTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *ArchiveTracer) Find(ctx context.Context, zone string, conditions *FindCondition) ([]*Archive, error) {
	log.Println("[TRACE] ArchiveTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] ArchiveTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *ArchiveTracer) Create(ctx context.Context, zone string, param *ArchiveCreateRequest) (*Archive, error) {
	log.Println("[TRACE] ArchiveTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] ArchiveTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// CreateBlank is API call with trace log
func (t *ArchiveTracer) CreateBlank(ctx context.Context, zone string, param *ArchiveCreateBlankRequest) (*Archive, *FTPServer, error) {
	log.Println("[TRACE] ArchiveTracer.CreateBlank start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] ArchiveTracer.CreateBlank: end")
	}()

	return t.Internal.CreateBlank(ctx, zone, param)
}

// Read is API call with trace log
func (t *ArchiveTracer) Read(ctx context.Context, zone string, id types.ID) (*Archive, error) {
	log.Println("[TRACE] ArchiveTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] ArchiveTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *ArchiveTracer) Update(ctx context.Context, zone string, id types.ID, param *ArchiveUpdateRequest) (*Archive, error) {
	log.Println("[TRACE] ArchiveTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] ArchiveTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *ArchiveTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] ArchiveTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] ArchiveTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// OpenFTP is API call with trace log
func (t *ArchiveTracer) OpenFTP(ctx context.Context, zone string, id types.ID, openOption *OpenFTPParam) (*FTPServer, error) {
	log.Println("[TRACE] ArchiveTracer.OpenFTP start:	args => [", "zone=", zone, "id=", id, "openOption=", openOption, "]")
	defer func() {
		log.Println("[TRACE] ArchiveTracer.OpenFTP: end")
	}()

	return t.Internal.OpenFTP(ctx, zone, id, openOption)
}

// CloseFTP is API call with trace log
func (t *ArchiveTracer) CloseFTP(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] ArchiveTracer.CloseFTP start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] ArchiveTracer.CloseFTP: end")
	}()

	return t.Internal.CloseFTP(ctx, zone, id)
}

/*************************************************
* CDROMTracer
*************************************************/

// CDROMTracer is for trace CDROMOp operations
type CDROMTracer struct {
	Internal CDROMAPI
}

// NewCDROMTracer creates new CDROMTracer instance
func NewCDROMTracer(in CDROMAPI) *CDROMTracer {
	return &CDROMTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *CDROMTracer) Find(ctx context.Context, zone string, conditions *FindCondition) ([]*CDROM, error) {
	log.Println("[TRACE] CDROMTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] CDROMTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *CDROMTracer) Create(ctx context.Context, zone string, param *CDROMCreateRequest) (*CDROM, *FTPServer, error) {
	log.Println("[TRACE] CDROMTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] CDROMTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *CDROMTracer) Read(ctx context.Context, zone string, id types.ID) (*CDROM, error) {
	log.Println("[TRACE] CDROMTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] CDROMTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *CDROMTracer) Update(ctx context.Context, zone string, id types.ID, param *CDROMUpdateRequest) (*CDROM, error) {
	log.Println("[TRACE] CDROMTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] CDROMTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *CDROMTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] CDROMTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] CDROMTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// OpenFTP is API call with trace log
func (t *CDROMTracer) OpenFTP(ctx context.Context, zone string, id types.ID, openOption *OpenFTPParam) (*FTPServer, error) {
	log.Println("[TRACE] CDROMTracer.OpenFTP start:	args => [", "zone=", zone, "id=", id, "openOption=", openOption, "]")
	defer func() {
		log.Println("[TRACE] CDROMTracer.OpenFTP: end")
	}()

	return t.Internal.OpenFTP(ctx, zone, id, openOption)
}

// CloseFTP is API call with trace log
func (t *CDROMTracer) CloseFTP(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] CDROMTracer.CloseFTP start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] CDROMTracer.CloseFTP: end")
	}()

	return t.Internal.CloseFTP(ctx, zone, id)
}

/*************************************************
* DiskTracer
*************************************************/

// DiskTracer is for trace DiskOp operations
type DiskTracer struct {
	Internal DiskAPI
}

// NewDiskTracer creates new DiskTracer instance
func NewDiskTracer(in DiskAPI) *DiskTracer {
	return &DiskTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *DiskTracer) Find(ctx context.Context, zone string, conditions *FindCondition) ([]*Disk, error) {
	log.Println("[TRACE] DiskTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *DiskTracer) Create(ctx context.Context, zone string, param *DiskCreateRequest) (*Disk, error) {
	log.Println("[TRACE] DiskTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *DiskTracer) Read(ctx context.Context, zone string, id types.ID) (*Disk, error) {
	log.Println("[TRACE] DiskTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *DiskTracer) Update(ctx context.Context, zone string, id types.ID, param *DiskUpdateRequest) (*Disk, error) {
	log.Println("[TRACE] DiskTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *DiskTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] DiskTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// Monitor is API call with trace log
func (t *DiskTracer) Monitor(ctx context.Context, zone string, id types.ID, condition *MonitorCondition) (*DiskActivity, error) {
	log.Println("[TRACE] DiskTracer.Monitor start:	args => [", "zone=", zone, "id=", id, "condition=", condition, "]")
	defer func() {
		log.Println("[TRACE] DiskTracer.Monitor: end")
	}()

	return t.Internal.Monitor(ctx, zone, id, condition)
}

/*************************************************
* GSLBTracer
*************************************************/

// GSLBTracer is for trace GSLBOp operations
type GSLBTracer struct {
	Internal GSLBAPI
}

// NewGSLBTracer creates new GSLBTracer instance
func NewGSLBTracer(in GSLBAPI) *GSLBTracer {
	return &GSLBTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *GSLBTracer) Find(ctx context.Context, zone string, conditions *FindCondition) ([]*GSLB, error) {
	log.Println("[TRACE] GSLBTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] GSLBTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *GSLBTracer) Create(ctx context.Context, zone string, param *GSLBCreateRequest) (*GSLB, error) {
	log.Println("[TRACE] GSLBTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] GSLBTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *GSLBTracer) Read(ctx context.Context, zone string, id types.ID) (*GSLB, error) {
	log.Println("[TRACE] GSLBTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] GSLBTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *GSLBTracer) Update(ctx context.Context, zone string, id types.ID, param *GSLBUpdateRequest) (*GSLB, error) {
	log.Println("[TRACE] GSLBTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] GSLBTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *GSLBTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] GSLBTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] GSLBTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

/*************************************************
* LoadBalancerTracer
*************************************************/

// LoadBalancerTracer is for trace LoadBalancerOp operations
type LoadBalancerTracer struct {
	Internal LoadBalancerAPI
}

// NewLoadBalancerTracer creates new LoadBalancerTracer instance
func NewLoadBalancerTracer(in LoadBalancerAPI) *LoadBalancerTracer {
	return &LoadBalancerTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *LoadBalancerTracer) Find(ctx context.Context, zone string, conditions *FindCondition) ([]*LoadBalancer, error) {
	log.Println("[TRACE] LoadBalancerTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *LoadBalancerTracer) Create(ctx context.Context, zone string, param *LoadBalancerCreateRequest) (*LoadBalancer, error) {
	log.Println("[TRACE] LoadBalancerTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *LoadBalancerTracer) Read(ctx context.Context, zone string, id types.ID) (*LoadBalancer, error) {
	log.Println("[TRACE] LoadBalancerTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *LoadBalancerTracer) Update(ctx context.Context, zone string, id types.ID, param *LoadBalancerUpdateRequest) (*LoadBalancer, error) {
	log.Println("[TRACE] LoadBalancerTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *LoadBalancerTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] LoadBalancerTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// Config is API call with trace log
func (t *LoadBalancerTracer) Config(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] LoadBalancerTracer.Config start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Config: end")
	}()

	return t.Internal.Config(ctx, zone, id)
}

// Boot is API call with trace log
func (t *LoadBalancerTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] LoadBalancerTracer.Boot start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Boot: end")
	}()

	return t.Internal.Boot(ctx, zone, id)
}

// Shutdown is API call with trace log
func (t *LoadBalancerTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *ShutdownOption) error {
	log.Println("[TRACE] LoadBalancerTracer.Shutdown start:	args => [", "zone=", zone, "id=", id, "shutdownOption=", shutdownOption, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Shutdown: end")
	}()

	return t.Internal.Shutdown(ctx, zone, id, shutdownOption)
}

// Reset is API call with trace log
func (t *LoadBalancerTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] LoadBalancerTracer.Reset start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Reset: end")
	}()

	return t.Internal.Reset(ctx, zone, id)
}

// MonitorInterface is API call with trace log
func (t *LoadBalancerTracer) MonitorInterface(ctx context.Context, zone string, id types.ID, condition *MonitorCondition) (*InterfaceActivity, error) {
	log.Println("[TRACE] LoadBalancerTracer.MonitorInterface start:	args => [", "zone=", zone, "id=", id, "condition=", condition, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.MonitorInterface: end")
	}()

	return t.Internal.MonitorInterface(ctx, zone, id, condition)
}

// Status is API call with trace log
func (t *LoadBalancerTracer) Status(ctx context.Context, zone string, id types.ID) ([]*LoadBalancerStatus, error) {
	log.Println("[TRACE] LoadBalancerTracer.Status start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] LoadBalancerTracer.Status: end")
	}()

	return t.Internal.Status(ctx, zone, id)
}

/*************************************************
* NFSTracer
*************************************************/

// NFSTracer is for trace NFSOp operations
type NFSTracer struct {
	Internal NFSAPI
}

// NewNFSTracer creates new NFSTracer instance
func NewNFSTracer(in NFSAPI) *NFSTracer {
	return &NFSTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *NFSTracer) Find(ctx context.Context, zone string, conditions *FindCondition) ([]*NFS, error) {
	log.Println("[TRACE] NFSTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *NFSTracer) Create(ctx context.Context, zone string, param *NFSCreateRequest) (*NFS, error) {
	log.Println("[TRACE] NFSTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *NFSTracer) Read(ctx context.Context, zone string, id types.ID) (*NFS, error) {
	log.Println("[TRACE] NFSTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *NFSTracer) Update(ctx context.Context, zone string, id types.ID, param *NFSUpdateRequest) (*NFS, error) {
	log.Println("[TRACE] NFSTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *NFSTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] NFSTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// Boot is API call with trace log
func (t *NFSTracer) Boot(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] NFSTracer.Boot start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.Boot: end")
	}()

	return t.Internal.Boot(ctx, zone, id)
}

// Shutdown is API call with trace log
func (t *NFSTracer) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *ShutdownOption) error {
	log.Println("[TRACE] NFSTracer.Shutdown start:	args => [", "zone=", zone, "id=", id, "shutdownOption=", shutdownOption, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.Shutdown: end")
	}()

	return t.Internal.Shutdown(ctx, zone, id, shutdownOption)
}

// Reset is API call with trace log
func (t *NFSTracer) Reset(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] NFSTracer.Reset start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.Reset: end")
	}()

	return t.Internal.Reset(ctx, zone, id)
}

// MonitorFreeDiskSize is API call with trace log
func (t *NFSTracer) MonitorFreeDiskSize(ctx context.Context, zone string, id types.ID, condition *MonitorCondition) (*FreeDiskSizeActivity, error) {
	log.Println("[TRACE] NFSTracer.MonitorFreeDiskSize start:	args => [", "zone=", zone, "id=", id, "condition=", condition, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.MonitorFreeDiskSize: end")
	}()

	return t.Internal.MonitorFreeDiskSize(ctx, zone, id, condition)
}

// MonitorInterface is API call with trace log
func (t *NFSTracer) MonitorInterface(ctx context.Context, zone string, id types.ID, condition *MonitorCondition) (*InterfaceActivity, error) {
	log.Println("[TRACE] NFSTracer.MonitorInterface start:	args => [", "zone=", zone, "id=", id, "condition=", condition, "]")
	defer func() {
		log.Println("[TRACE] NFSTracer.MonitorInterface: end")
	}()

	return t.Internal.MonitorInterface(ctx, zone, id, condition)
}

/*************************************************
* NoteTracer
*************************************************/

// NoteTracer is for trace NoteOp operations
type NoteTracer struct {
	Internal NoteAPI
}

// NewNoteTracer creates new NoteTracer instance
func NewNoteTracer(in NoteAPI) *NoteTracer {
	return &NoteTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *NoteTracer) Find(ctx context.Context, zone string, conditions *FindCondition) ([]*Note, error) {
	log.Println("[TRACE] NoteTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] NoteTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *NoteTracer) Create(ctx context.Context, zone string, param *NoteCreateRequest) (*Note, error) {
	log.Println("[TRACE] NoteTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] NoteTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *NoteTracer) Read(ctx context.Context, zone string, id types.ID) (*Note, error) {
	log.Println("[TRACE] NoteTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] NoteTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *NoteTracer) Update(ctx context.Context, zone string, id types.ID, param *NoteUpdateRequest) (*Note, error) {
	log.Println("[TRACE] NoteTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] NoteTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *NoteTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] NoteTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] NoteTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

/*************************************************
* SwitchTracer
*************************************************/

// SwitchTracer is for trace SwitchOp operations
type SwitchTracer struct {
	Internal SwitchAPI
}

// NewSwitchTracer creates new SwitchTracer instance
func NewSwitchTracer(in SwitchAPI) *SwitchTracer {
	return &SwitchTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *SwitchTracer) Find(ctx context.Context, zone string, conditions *FindCondition) ([]*Switch, error) {
	log.Println("[TRACE] SwitchTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] SwitchTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Create is API call with trace log
func (t *SwitchTracer) Create(ctx context.Context, zone string, param *SwitchCreateRequest) (*Switch, error) {
	log.Println("[TRACE] SwitchTracer.Create start:	args => [", "zone=", zone, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] SwitchTracer.Create: end")
	}()

	return t.Internal.Create(ctx, zone, param)
}

// Read is API call with trace log
func (t *SwitchTracer) Read(ctx context.Context, zone string, id types.ID) (*Switch, error) {
	log.Println("[TRACE] SwitchTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] SwitchTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}

// Update is API call with trace log
func (t *SwitchTracer) Update(ctx context.Context, zone string, id types.ID, param *SwitchUpdateRequest) (*Switch, error) {
	log.Println("[TRACE] SwitchTracer.Update start:	args => [", "zone=", zone, "id=", id, "param=", param, "]")
	defer func() {
		log.Println("[TRACE] SwitchTracer.Update: end")
	}()

	return t.Internal.Update(ctx, zone, id, param)
}

// Delete is API call with trace log
func (t *SwitchTracer) Delete(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] SwitchTracer.Delete start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] SwitchTracer.Delete: end")
	}()

	return t.Internal.Delete(ctx, zone, id)
}

// ConnectToBridge is API call with trace log
func (t *SwitchTracer) ConnectToBridge(ctx context.Context, zone string, id types.ID, bridgeID types.ID) error {
	log.Println("[TRACE] SwitchTracer.ConnectToBridge start:	args => [", "zone=", zone, "id=", id, "bridgeID=", bridgeID, "]")
	defer func() {
		log.Println("[TRACE] SwitchTracer.ConnectToBridge: end")
	}()

	return t.Internal.ConnectToBridge(ctx, zone, id, bridgeID)
}

// DisconnectFromBridge is API call with trace log
func (t *SwitchTracer) DisconnectFromBridge(ctx context.Context, zone string, id types.ID) error {
	log.Println("[TRACE] SwitchTracer.DisconnectFromBridge start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] SwitchTracer.DisconnectFromBridge: end")
	}()

	return t.Internal.DisconnectFromBridge(ctx, zone, id)
}

/*************************************************
* ZoneTracer
*************************************************/

// ZoneTracer is for trace ZoneOp operations
type ZoneTracer struct {
	Internal ZoneAPI
}

// NewZoneTracer creates new ZoneTracer instance
func NewZoneTracer(in ZoneAPI) *ZoneTracer {
	return &ZoneTracer{
		Internal: in,
	}
}

// Find is API call with trace log
func (t *ZoneTracer) Find(ctx context.Context, zone string, conditions *FindCondition) ([]*Zone, error) {
	log.Println("[TRACE] ZoneTracer.Find start:	args => [", "zone=", zone, "conditions=", conditions, "]")
	defer func() {
		log.Println("[TRACE] ZoneTracer.Find: end")
	}()

	return t.Internal.Find(ctx, zone, conditions)
}

// Read is API call with trace log
func (t *ZoneTracer) Read(ctx context.Context, zone string, id types.ID) (*Zone, error) {
	log.Println("[TRACE] ZoneTracer.Read start:	args => [", "zone=", zone, "id=", id, "]")
	defer func() {
		log.Println("[TRACE] ZoneTracer.Read: end")
	}()

	return t.Internal.Read(ctx, zone, id)
}
