// generated by 'github.com/sacloud/libsacloud/internal/tools/gen-api-op'; DO NOT EDIT

package sacloud

import (
	"context"
	"encoding/json"
)

// ZoneOp implements ZoneAPI interface
type ZoneOp struct {
	// Client APICaller
	Client APICaller
	// PathSuffix is used when building URL
	PathSuffix string
	// PathName is used when building URL
	PathName string
}

// NewZoneOp creates new ZoneOp instance
func NewZoneOp(client APICaller) *ZoneOp {
	return &ZoneOp{
		Client:     client,
		PathSuffix: "api/cloud/1.1",
		PathName:   "zone",
	}
}

// Find is API call
func (o *ZoneOp) Find(ctx context.Context, zone string, conditions *FindCondition) ([]*Zone, error) {
	url, err := buildURL("{{.rootURL}}/{{.zone}}/{{.pathSuffix}}/{{.pathName}}", map[string]interface{}{
		"rootURL":    SakuraCloudAPIRoot,
		"pathSuffix": o.PathSuffix,
		"pathName":   o.PathName,
		"zone":       zone,
		"conditions": conditions,
	})
	if err != nil {
		return nil, err
	}

	var body interface{}
	{
		if body == nil {
			body = &ZoneFindRequestEnvelope{}
		}
		v := body.(*ZoneFindRequestEnvelope)
		v.Count = conditions.Count
		v.From = conditions.From
		v.Sort = conditions.Sort
		v.Filter = conditions.Filter
		v.Include = conditions.Include
		v.Exclude = conditions.Exclude
		body = v
	}

	data, err := o.Client.Do(ctx, "GET", url, body)
	if err != nil {
		return nil, err
	}

	nakedResponse := &ZoneFindResponseEnvelope{}
	if err := json.Unmarshal(data, nakedResponse); err != nil {
		return nil, err
	}

	var payload0 []*Zone
	for _, v := range nakedResponse.Zones {
		payload := &Zone{}
		if err := payload.parseNaked(v); err != nil {
			return nil, err
		}
		payload0 = append(payload0, payload)
	}
	return payload0, nil
}

// Read is API call
func (o *ZoneOp) Read(ctx context.Context, zone string, id int64) (*Zone, error) {
	url, err := buildURL("{{.rootURL}}/{{.zone}}/{{.pathSuffix}}/{{.pathName}}/{{.id}}", map[string]interface{}{
		"rootURL":    SakuraCloudAPIRoot,
		"pathSuffix": o.PathSuffix,
		"pathName":   o.PathName,
		"zone":       zone,
		"id":         id,
	})
	if err != nil {
		return nil, err
	}

	var body interface{}

	data, err := o.Client.Do(ctx, "GET", url, body)
	if err != nil {
		return nil, err
	}

	nakedResponse := &ZoneReadResponseEnvelope{}
	if err := json.Unmarshal(data, nakedResponse); err != nil {
		return nil, err
	}

	payload0 := &Zone{}
	if err := payload0.parseNaked(nakedResponse.Zone); err != nil {
		return nil, err
	}
	return payload0, nil
}
