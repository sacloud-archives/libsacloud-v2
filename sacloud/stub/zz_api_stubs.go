// generated by 'github.com/sacloud/libsacloud/internal/tools/gen-api-stub'; DO NOT EDIT

package stub

import (
	"context"
	"log"

	"github.com/sacloud/libsacloud-v2/sacloud"
	"github.com/sacloud/libsacloud-v2/sacloud/types"
)

/*************************************************
* ArchiveStub
*************************************************/

// ArchiveFindResult is expected values of the Find operation
type ArchiveFindResult struct {
	Archives []*sacloud.Archive
	Err      error
}

// ArchiveCreateResult is expected values of the Create operation
type ArchiveCreateResult struct {
	Archive *sacloud.Archive
	Err     error
}

// ArchiveCreateBlankResult is expected values of the CreateBlank operation
type ArchiveCreateBlankResult struct {
	Archive   *sacloud.Archive
	FTPServer *sacloud.FTPServer
	Err       error
}

// ArchiveReadResult is expected values of the Read operation
type ArchiveReadResult struct {
	Archive *sacloud.Archive
	Err     error
}

// ArchiveUpdateResult is expected values of the Update operation
type ArchiveUpdateResult struct {
	Archive *sacloud.Archive
	Err     error
}

// ArchiveDeleteResult is expected values of the Delete operation
type ArchiveDeleteResult struct {
	Err error
}

// ArchiveOpenFTPResult is expected values of the OpenFTP operation
type ArchiveOpenFTPResult struct {
	FTPServer *sacloud.FTPServer
	Err       error
}

// ArchiveCloseFTPResult is expected values of the CloseFTP operation
type ArchiveCloseFTPResult struct {
	Err error
}

// ArchiveStub is for trace ArchiveOp operations
type ArchiveStub struct {
	FindResult        *ArchiveFindResult
	CreateResult      *ArchiveCreateResult
	CreateBlankResult *ArchiveCreateBlankResult
	ReadResult        *ArchiveReadResult
	UpdateResult      *ArchiveUpdateResult
	DeleteResult      *ArchiveDeleteResult
	OpenFTPResult     *ArchiveOpenFTPResult
	CloseFTPResult    *ArchiveCloseFTPResult
}

// NewArchiveStub creates new ArchiveStub instance
func NewArchiveStub(caller sacloud.APICaller) sacloud.ArchiveAPI {
	return &ArchiveStub{}
}

// Find is API call with trace log
func (s *ArchiveStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) ([]*sacloud.Archive, error) {
	if s.FindResult == nil {
		log.Fatal("ArchiveStub.FindResult is not set")
	}
	return s.FindResult.Archives, s.FindResult.Err
}

// Create is API call with trace log
func (s *ArchiveStub) Create(ctx context.Context, zone string, param *sacloud.ArchiveCreateRequest) (*sacloud.Archive, error) {
	if s.CreateResult == nil {
		log.Fatal("ArchiveStub.CreateResult is not set")
	}
	return s.CreateResult.Archive, s.CreateResult.Err
}

// CreateBlank is API call with trace log
func (s *ArchiveStub) CreateBlank(ctx context.Context, zone string, param *sacloud.ArchiveCreateBlankRequest) (*sacloud.Archive, *sacloud.FTPServer, error) {
	if s.CreateBlankResult == nil {
		log.Fatal("ArchiveStub.CreateBlankResult is not set")
	}
	return s.CreateBlankResult.Archive, s.CreateBlankResult.FTPServer, s.CreateBlankResult.Err
}

// Read is API call with trace log
func (s *ArchiveStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.Archive, error) {
	if s.ReadResult == nil {
		log.Fatal("ArchiveStub.ReadResult is not set")
	}
	return s.ReadResult.Archive, s.ReadResult.Err
}

// Update is API call with trace log
func (s *ArchiveStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.ArchiveUpdateRequest) (*sacloud.Archive, error) {
	if s.UpdateResult == nil {
		log.Fatal("ArchiveStub.UpdateResult is not set")
	}
	return s.UpdateResult.Archive, s.UpdateResult.Err
}

// Delete is API call with trace log
func (s *ArchiveStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteResult == nil {
		log.Fatal("ArchiveStub.DeleteResult is not set")
	}
	return s.DeleteResult.Err
}

// OpenFTP is API call with trace log
func (s *ArchiveStub) OpenFTP(ctx context.Context, zone string, id types.ID, openOption *sacloud.OpenFTPRequest) (*sacloud.FTPServer, error) {
	if s.OpenFTPResult == nil {
		log.Fatal("ArchiveStub.OpenFTPResult is not set")
	}
	return s.OpenFTPResult.FTPServer, s.OpenFTPResult.Err
}

// CloseFTP is API call with trace log
func (s *ArchiveStub) CloseFTP(ctx context.Context, zone string, id types.ID) error {
	if s.CloseFTPResult == nil {
		log.Fatal("ArchiveStub.CloseFTPResult is not set")
	}
	return s.CloseFTPResult.Err
}

/*************************************************
* CDROMStub
*************************************************/

// CDROMFindResult is expected values of the Find operation
type CDROMFindResult struct {
	CDROMs []*sacloud.CDROM
	Err    error
}

// CDROMCreateResult is expected values of the Create operation
type CDROMCreateResult struct {
	CDROM     *sacloud.CDROM
	FTPServer *sacloud.FTPServer
	Err       error
}

// CDROMReadResult is expected values of the Read operation
type CDROMReadResult struct {
	CDROM *sacloud.CDROM
	Err   error
}

// CDROMUpdateResult is expected values of the Update operation
type CDROMUpdateResult struct {
	CDROM *sacloud.CDROM
	Err   error
}

// CDROMDeleteResult is expected values of the Delete operation
type CDROMDeleteResult struct {
	Err error
}

// CDROMOpenFTPResult is expected values of the OpenFTP operation
type CDROMOpenFTPResult struct {
	FTPServer *sacloud.FTPServer
	Err       error
}

// CDROMCloseFTPResult is expected values of the CloseFTP operation
type CDROMCloseFTPResult struct {
	Err error
}

// CDROMStub is for trace CDROMOp operations
type CDROMStub struct {
	FindResult     *CDROMFindResult
	CreateResult   *CDROMCreateResult
	ReadResult     *CDROMReadResult
	UpdateResult   *CDROMUpdateResult
	DeleteResult   *CDROMDeleteResult
	OpenFTPResult  *CDROMOpenFTPResult
	CloseFTPResult *CDROMCloseFTPResult
}

// NewCDROMStub creates new CDROMStub instance
func NewCDROMStub(caller sacloud.APICaller) sacloud.CDROMAPI {
	return &CDROMStub{}
}

// Find is API call with trace log
func (s *CDROMStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) ([]*sacloud.CDROM, error) {
	if s.FindResult == nil {
		log.Fatal("CDROMStub.FindResult is not set")
	}
	return s.FindResult.CDROMs, s.FindResult.Err
}

// Create is API call with trace log
func (s *CDROMStub) Create(ctx context.Context, zone string, param *sacloud.CDROMCreateRequest) (*sacloud.CDROM, *sacloud.FTPServer, error) {
	if s.CreateResult == nil {
		log.Fatal("CDROMStub.CreateResult is not set")
	}
	return s.CreateResult.CDROM, s.CreateResult.FTPServer, s.CreateResult.Err
}

// Read is API call with trace log
func (s *CDROMStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.CDROM, error) {
	if s.ReadResult == nil {
		log.Fatal("CDROMStub.ReadResult is not set")
	}
	return s.ReadResult.CDROM, s.ReadResult.Err
}

// Update is API call with trace log
func (s *CDROMStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.CDROMUpdateRequest) (*sacloud.CDROM, error) {
	if s.UpdateResult == nil {
		log.Fatal("CDROMStub.UpdateResult is not set")
	}
	return s.UpdateResult.CDROM, s.UpdateResult.Err
}

// Delete is API call with trace log
func (s *CDROMStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteResult == nil {
		log.Fatal("CDROMStub.DeleteResult is not set")
	}
	return s.DeleteResult.Err
}

// OpenFTP is API call with trace log
func (s *CDROMStub) OpenFTP(ctx context.Context, zone string, id types.ID, openOption *sacloud.OpenFTPRequest) (*sacloud.FTPServer, error) {
	if s.OpenFTPResult == nil {
		log.Fatal("CDROMStub.OpenFTPResult is not set")
	}
	return s.OpenFTPResult.FTPServer, s.OpenFTPResult.Err
}

// CloseFTP is API call with trace log
func (s *CDROMStub) CloseFTP(ctx context.Context, zone string, id types.ID) error {
	if s.CloseFTPResult == nil {
		log.Fatal("CDROMStub.CloseFTPResult is not set")
	}
	return s.CloseFTPResult.Err
}

/*************************************************
* DiskStub
*************************************************/

// DiskFindResult is expected values of the Find operation
type DiskFindResult struct {
	Disks []*sacloud.Disk
	Err   error
}

// DiskCreateResult is expected values of the Create operation
type DiskCreateResult struct {
	Disk *sacloud.Disk
	Err  error
}

// DiskCreateDistantlyResult is expected values of the CreateDistantly operation
type DiskCreateDistantlyResult struct {
	Disk *sacloud.Disk
	Err  error
}

// DiskConfigResult is expected values of the Config operation
type DiskConfigResult struct {
	Err error
}

// DiskCreateWithConfigResult is expected values of the CreateWithConfig operation
type DiskCreateWithConfigResult struct {
	Disk *sacloud.Disk
	Err  error
}

// DiskCreateWithConfigDistantlyResult is expected values of the CreateWithConfigDistantly operation
type DiskCreateWithConfigDistantlyResult struct {
	Disk *sacloud.Disk
	Err  error
}

// DiskToBlankResult is expected values of the ToBlank operation
type DiskToBlankResult struct {
	Err error
}

// DiskResizePartitionResult is expected values of the ResizePartition operation
type DiskResizePartitionResult struct {
	Err error
}

// DiskConnectToServerResult is expected values of the ConnectToServer operation
type DiskConnectToServerResult struct {
	Err error
}

// DiskDisconnectFromServerResult is expected values of the DisconnectFromServer operation
type DiskDisconnectFromServerResult struct {
	Err error
}

// DiskInstallDistantFromResult is expected values of the InstallDistantFrom operation
type DiskInstallDistantFromResult struct {
	Disk *sacloud.Disk
	Err  error
}

// DiskInstallResult is expected values of the Install operation
type DiskInstallResult struct {
	Disk *sacloud.Disk
	Err  error
}

// DiskReadResult is expected values of the Read operation
type DiskReadResult struct {
	Disk *sacloud.Disk
	Err  error
}

// DiskUpdateResult is expected values of the Update operation
type DiskUpdateResult struct {
	Disk *sacloud.Disk
	Err  error
}

// DiskDeleteResult is expected values of the Delete operation
type DiskDeleteResult struct {
	Err error
}

// DiskMonitorResult is expected values of the Monitor operation
type DiskMonitorResult struct {
	Data *sacloud.DiskActivity
	Err  error
}

// DiskStub is for trace DiskOp operations
type DiskStub struct {
	FindResult                      *DiskFindResult
	CreateResult                    *DiskCreateResult
	CreateDistantlyResult           *DiskCreateDistantlyResult
	ConfigResult                    *DiskConfigResult
	CreateWithConfigResult          *DiskCreateWithConfigResult
	CreateWithConfigDistantlyResult *DiskCreateWithConfigDistantlyResult
	ToBlankResult                   *DiskToBlankResult
	ResizePartitionResult           *DiskResizePartitionResult
	ConnectToServerResult           *DiskConnectToServerResult
	DisconnectFromServerResult      *DiskDisconnectFromServerResult
	InstallDistantFromResult        *DiskInstallDistantFromResult
	InstallResult                   *DiskInstallResult
	ReadResult                      *DiskReadResult
	UpdateResult                    *DiskUpdateResult
	DeleteResult                    *DiskDeleteResult
	MonitorResult                   *DiskMonitorResult
}

// NewDiskStub creates new DiskStub instance
func NewDiskStub(caller sacloud.APICaller) sacloud.DiskAPI {
	return &DiskStub{}
}

// Find is API call with trace log
func (s *DiskStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) ([]*sacloud.Disk, error) {
	if s.FindResult == nil {
		log.Fatal("DiskStub.FindResult is not set")
	}
	return s.FindResult.Disks, s.FindResult.Err
}

// Create is API call with trace log
func (s *DiskStub) Create(ctx context.Context, zone string, param *sacloud.DiskCreateRequest) (*sacloud.Disk, error) {
	if s.CreateResult == nil {
		log.Fatal("DiskStub.CreateResult is not set")
	}
	return s.CreateResult.Disk, s.CreateResult.Err
}

// CreateDistantly is API call with trace log
func (s *DiskStub) CreateDistantly(ctx context.Context, zone string, createParam *sacloud.DiskCreateRequest, distantFrom []types.ID) (*sacloud.Disk, error) {
	if s.CreateDistantlyResult == nil {
		log.Fatal("DiskStub.CreateDistantlyResult is not set")
	}
	return s.CreateDistantlyResult.Disk, s.CreateDistantlyResult.Err
}

// Config is API call with trace log
func (s *DiskStub) Config(ctx context.Context, zone string, id types.ID, edit *sacloud.DiskEditRequest) error {
	if s.ConfigResult == nil {
		log.Fatal("DiskStub.ConfigResult is not set")
	}
	return s.ConfigResult.Err
}

// CreateWithConfig is API call with trace log
func (s *DiskStub) CreateWithConfig(ctx context.Context, zone string, createParam *sacloud.DiskCreateRequest, editParam *sacloud.DiskEditRequest, bootAtAvailable bool) (*sacloud.Disk, error) {
	if s.CreateWithConfigResult == nil {
		log.Fatal("DiskStub.CreateWithConfigResult is not set")
	}
	return s.CreateWithConfigResult.Disk, s.CreateWithConfigResult.Err
}

// CreateWithConfigDistantly is API call with trace log
func (s *DiskStub) CreateWithConfigDistantly(ctx context.Context, zone string, createParam *sacloud.DiskCreateRequest, editParam *sacloud.DiskEditRequest, bootAtAvailable bool, distantFrom []types.ID) (*sacloud.Disk, error) {
	if s.CreateWithConfigDistantlyResult == nil {
		log.Fatal("DiskStub.CreateWithConfigDistantlyResult is not set")
	}
	return s.CreateWithConfigDistantlyResult.Disk, s.CreateWithConfigDistantlyResult.Err
}

// ToBlank is API call with trace log
func (s *DiskStub) ToBlank(ctx context.Context, zone string, id types.ID) error {
	if s.ToBlankResult == nil {
		log.Fatal("DiskStub.ToBlankResult is not set")
	}
	return s.ToBlankResult.Err
}

// ResizePartition is API call with trace log
func (s *DiskStub) ResizePartition(ctx context.Context, zone string, id types.ID) error {
	if s.ResizePartitionResult == nil {
		log.Fatal("DiskStub.ResizePartitionResult is not set")
	}
	return s.ResizePartitionResult.Err
}

// ConnectToServer is API call with trace log
func (s *DiskStub) ConnectToServer(ctx context.Context, zone string, id types.ID, serverID types.ID) error {
	if s.ConnectToServerResult == nil {
		log.Fatal("DiskStub.ConnectToServerResult is not set")
	}
	return s.ConnectToServerResult.Err
}

// DisconnectFromServer is API call with trace log
func (s *DiskStub) DisconnectFromServer(ctx context.Context, zone string, id types.ID) error {
	if s.DisconnectFromServerResult == nil {
		log.Fatal("DiskStub.DisconnectFromServerResult is not set")
	}
	return s.DisconnectFromServerResult.Err
}

// InstallDistantFrom is API call with trace log
func (s *DiskStub) InstallDistantFrom(ctx context.Context, zone string, id types.ID, installParam *sacloud.DiskInstallRequest, distantFrom []types.ID) (*sacloud.Disk, error) {
	if s.InstallDistantFromResult == nil {
		log.Fatal("DiskStub.InstallDistantFromResult is not set")
	}
	return s.InstallDistantFromResult.Disk, s.InstallDistantFromResult.Err
}

// Install is API call with trace log
func (s *DiskStub) Install(ctx context.Context, zone string, id types.ID, installParam *sacloud.DiskInstallRequest) (*sacloud.Disk, error) {
	if s.InstallResult == nil {
		log.Fatal("DiskStub.InstallResult is not set")
	}
	return s.InstallResult.Disk, s.InstallResult.Err
}

// Read is API call with trace log
func (s *DiskStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.Disk, error) {
	if s.ReadResult == nil {
		log.Fatal("DiskStub.ReadResult is not set")
	}
	return s.ReadResult.Disk, s.ReadResult.Err
}

// Update is API call with trace log
func (s *DiskStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.DiskUpdateRequest) (*sacloud.Disk, error) {
	if s.UpdateResult == nil {
		log.Fatal("DiskStub.UpdateResult is not set")
	}
	return s.UpdateResult.Disk, s.UpdateResult.Err
}

// Delete is API call with trace log
func (s *DiskStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteResult == nil {
		log.Fatal("DiskStub.DeleteResult is not set")
	}
	return s.DeleteResult.Err
}

// Monitor is API call with trace log
func (s *DiskStub) Monitor(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.DiskActivity, error) {
	if s.MonitorResult == nil {
		log.Fatal("DiskStub.MonitorResult is not set")
	}
	return s.MonitorResult.Data, s.MonitorResult.Err
}

/*************************************************
* GSLBStub
*************************************************/

// GSLBFindResult is expected values of the Find operation
type GSLBFindResult struct {
	CommonServiceItems []*sacloud.GSLB
	Err                error
}

// GSLBCreateResult is expected values of the Create operation
type GSLBCreateResult struct {
	CommonServiceItem *sacloud.GSLB
	Err               error
}

// GSLBReadResult is expected values of the Read operation
type GSLBReadResult struct {
	CommonServiceItem *sacloud.GSLB
	Err               error
}

// GSLBUpdateResult is expected values of the Update operation
type GSLBUpdateResult struct {
	CommonServiceItem *sacloud.GSLB
	Err               error
}

// GSLBDeleteResult is expected values of the Delete operation
type GSLBDeleteResult struct {
	Err error
}

// GSLBStub is for trace GSLBOp operations
type GSLBStub struct {
	FindResult   *GSLBFindResult
	CreateResult *GSLBCreateResult
	ReadResult   *GSLBReadResult
	UpdateResult *GSLBUpdateResult
	DeleteResult *GSLBDeleteResult
}

// NewGSLBStub creates new GSLBStub instance
func NewGSLBStub(caller sacloud.APICaller) sacloud.GSLBAPI {
	return &GSLBStub{}
}

// Find is API call with trace log
func (s *GSLBStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) ([]*sacloud.GSLB, error) {
	if s.FindResult == nil {
		log.Fatal("GSLBStub.FindResult is not set")
	}
	return s.FindResult.CommonServiceItems, s.FindResult.Err
}

// Create is API call with trace log
func (s *GSLBStub) Create(ctx context.Context, zone string, param *sacloud.GSLBCreateRequest) (*sacloud.GSLB, error) {
	if s.CreateResult == nil {
		log.Fatal("GSLBStub.CreateResult is not set")
	}
	return s.CreateResult.CommonServiceItem, s.CreateResult.Err
}

// Read is API call with trace log
func (s *GSLBStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.GSLB, error) {
	if s.ReadResult == nil {
		log.Fatal("GSLBStub.ReadResult is not set")
	}
	return s.ReadResult.CommonServiceItem, s.ReadResult.Err
}

// Update is API call with trace log
func (s *GSLBStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.GSLBUpdateRequest) (*sacloud.GSLB, error) {
	if s.UpdateResult == nil {
		log.Fatal("GSLBStub.UpdateResult is not set")
	}
	return s.UpdateResult.CommonServiceItem, s.UpdateResult.Err
}

// Delete is API call with trace log
func (s *GSLBStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteResult == nil {
		log.Fatal("GSLBStub.DeleteResult is not set")
	}
	return s.DeleteResult.Err
}

/*************************************************
* InterfaceStub
*************************************************/

// InterfaceFindResult is expected values of the Find operation
type InterfaceFindResult struct {
	Interfaces []*sacloud.Interface
	Err        error
}

// InterfaceCreateResult is expected values of the Create operation
type InterfaceCreateResult struct {
	Interface *sacloud.Interface
	Err       error
}

// InterfaceReadResult is expected values of the Read operation
type InterfaceReadResult struct {
	Interface *sacloud.Interface
	Err       error
}

// InterfaceUpdateResult is expected values of the Update operation
type InterfaceUpdateResult struct {
	Interface *sacloud.Interface
	Err       error
}

// InterfaceDeleteResult is expected values of the Delete operation
type InterfaceDeleteResult struct {
	Err error
}

// InterfaceMonitorResult is expected values of the Monitor operation
type InterfaceMonitorResult struct {
	Data *sacloud.InterfaceActivity
	Err  error
}

// InterfaceConnectToSharedSegmentResult is expected values of the ConnectToSharedSegment operation
type InterfaceConnectToSharedSegmentResult struct {
	Err error
}

// InterfaceConnectToSwitchResult is expected values of the ConnectToSwitch operation
type InterfaceConnectToSwitchResult struct {
	Err error
}

// InterfaceDisconnectFromSwitchResult is expected values of the DisconnectFromSwitch operation
type InterfaceDisconnectFromSwitchResult struct {
	Err error
}

// InterfaceConnectToPacketFilterResult is expected values of the ConnectToPacketFilter operation
type InterfaceConnectToPacketFilterResult struct {
	Err error
}

// InterfaceDisconnectFromPacketFilterResult is expected values of the DisconnectFromPacketFilter operation
type InterfaceDisconnectFromPacketFilterResult struct {
	Err error
}

// InterfaceStub is for trace InterfaceOp operations
type InterfaceStub struct {
	FindResult                       *InterfaceFindResult
	CreateResult                     *InterfaceCreateResult
	ReadResult                       *InterfaceReadResult
	UpdateResult                     *InterfaceUpdateResult
	DeleteResult                     *InterfaceDeleteResult
	MonitorResult                    *InterfaceMonitorResult
	ConnectToSharedSegmentResult     *InterfaceConnectToSharedSegmentResult
	ConnectToSwitchResult            *InterfaceConnectToSwitchResult
	DisconnectFromSwitchResult       *InterfaceDisconnectFromSwitchResult
	ConnectToPacketFilterResult      *InterfaceConnectToPacketFilterResult
	DisconnectFromPacketFilterResult *InterfaceDisconnectFromPacketFilterResult
}

// NewInterfaceStub creates new InterfaceStub instance
func NewInterfaceStub(caller sacloud.APICaller) sacloud.InterfaceAPI {
	return &InterfaceStub{}
}

// Find is API call with trace log
func (s *InterfaceStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) ([]*sacloud.Interface, error) {
	if s.FindResult == nil {
		log.Fatal("InterfaceStub.FindResult is not set")
	}
	return s.FindResult.Interfaces, s.FindResult.Err
}

// Create is API call with trace log
func (s *InterfaceStub) Create(ctx context.Context, zone string, param *sacloud.InterfaceCreateRequest) (*sacloud.Interface, error) {
	if s.CreateResult == nil {
		log.Fatal("InterfaceStub.CreateResult is not set")
	}
	return s.CreateResult.Interface, s.CreateResult.Err
}

// Read is API call with trace log
func (s *InterfaceStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.Interface, error) {
	if s.ReadResult == nil {
		log.Fatal("InterfaceStub.ReadResult is not set")
	}
	return s.ReadResult.Interface, s.ReadResult.Err
}

// Update is API call with trace log
func (s *InterfaceStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.InterfaceUpdateRequest) (*sacloud.Interface, error) {
	if s.UpdateResult == nil {
		log.Fatal("InterfaceStub.UpdateResult is not set")
	}
	return s.UpdateResult.Interface, s.UpdateResult.Err
}

// Delete is API call with trace log
func (s *InterfaceStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteResult == nil {
		log.Fatal("InterfaceStub.DeleteResult is not set")
	}
	return s.DeleteResult.Err
}

// Monitor is API call with trace log
func (s *InterfaceStub) Monitor(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.InterfaceActivity, error) {
	if s.MonitorResult == nil {
		log.Fatal("InterfaceStub.MonitorResult is not set")
	}
	return s.MonitorResult.Data, s.MonitorResult.Err
}

// ConnectToSharedSegment is API call with trace log
func (s *InterfaceStub) ConnectToSharedSegment(ctx context.Context, zone string, id types.ID) error {
	if s.ConnectToSharedSegmentResult == nil {
		log.Fatal("InterfaceStub.ConnectToSharedSegmentResult is not set")
	}
	return s.ConnectToSharedSegmentResult.Err
}

// ConnectToSwitch is API call with trace log
func (s *InterfaceStub) ConnectToSwitch(ctx context.Context, zone string, id types.ID, switchID types.ID) error {
	if s.ConnectToSwitchResult == nil {
		log.Fatal("InterfaceStub.ConnectToSwitchResult is not set")
	}
	return s.ConnectToSwitchResult.Err
}

// DisconnectFromSwitch is API call with trace log
func (s *InterfaceStub) DisconnectFromSwitch(ctx context.Context, zone string, id types.ID) error {
	if s.DisconnectFromSwitchResult == nil {
		log.Fatal("InterfaceStub.DisconnectFromSwitchResult is not set")
	}
	return s.DisconnectFromSwitchResult.Err
}

// ConnectToPacketFilter is API call with trace log
func (s *InterfaceStub) ConnectToPacketFilter(ctx context.Context, zone string, id types.ID, packetFilterID types.ID) error {
	if s.ConnectToPacketFilterResult == nil {
		log.Fatal("InterfaceStub.ConnectToPacketFilterResult is not set")
	}
	return s.ConnectToPacketFilterResult.Err
}

// DisconnectFromPacketFilter is API call with trace log
func (s *InterfaceStub) DisconnectFromPacketFilter(ctx context.Context, zone string, id types.ID) error {
	if s.DisconnectFromPacketFilterResult == nil {
		log.Fatal("InterfaceStub.DisconnectFromPacketFilterResult is not set")
	}
	return s.DisconnectFromPacketFilterResult.Err
}

/*************************************************
* LoadBalancerStub
*************************************************/

// LoadBalancerFindResult is expected values of the Find operation
type LoadBalancerFindResult struct {
	Appliances []*sacloud.LoadBalancer
	Err        error
}

// LoadBalancerCreateResult is expected values of the Create operation
type LoadBalancerCreateResult struct {
	Appliance *sacloud.LoadBalancer
	Err       error
}

// LoadBalancerReadResult is expected values of the Read operation
type LoadBalancerReadResult struct {
	Appliance *sacloud.LoadBalancer
	Err       error
}

// LoadBalancerUpdateResult is expected values of the Update operation
type LoadBalancerUpdateResult struct {
	Appliance *sacloud.LoadBalancer
	Err       error
}

// LoadBalancerDeleteResult is expected values of the Delete operation
type LoadBalancerDeleteResult struct {
	Err error
}

// LoadBalancerConfigResult is expected values of the Config operation
type LoadBalancerConfigResult struct {
	Err error
}

// LoadBalancerBootResult is expected values of the Boot operation
type LoadBalancerBootResult struct {
	Err error
}

// LoadBalancerShutdownResult is expected values of the Shutdown operation
type LoadBalancerShutdownResult struct {
	Err error
}

// LoadBalancerResetResult is expected values of the Reset operation
type LoadBalancerResetResult struct {
	Err error
}

// LoadBalancerMonitorInterfaceResult is expected values of the MonitorInterface operation
type LoadBalancerMonitorInterfaceResult struct {
	Data *sacloud.InterfaceActivity
	Err  error
}

// LoadBalancerStatusResult is expected values of the Status operation
type LoadBalancerStatusResult struct {
	LoadBalancer []*sacloud.LoadBalancerStatus
	Err          error
}

// LoadBalancerStub is for trace LoadBalancerOp operations
type LoadBalancerStub struct {
	FindResult             *LoadBalancerFindResult
	CreateResult           *LoadBalancerCreateResult
	ReadResult             *LoadBalancerReadResult
	UpdateResult           *LoadBalancerUpdateResult
	DeleteResult           *LoadBalancerDeleteResult
	ConfigResult           *LoadBalancerConfigResult
	BootResult             *LoadBalancerBootResult
	ShutdownResult         *LoadBalancerShutdownResult
	ResetResult            *LoadBalancerResetResult
	MonitorInterfaceResult *LoadBalancerMonitorInterfaceResult
	StatusResult           *LoadBalancerStatusResult
}

// NewLoadBalancerStub creates new LoadBalancerStub instance
func NewLoadBalancerStub(caller sacloud.APICaller) sacloud.LoadBalancerAPI {
	return &LoadBalancerStub{}
}

// Find is API call with trace log
func (s *LoadBalancerStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) ([]*sacloud.LoadBalancer, error) {
	if s.FindResult == nil {
		log.Fatal("LoadBalancerStub.FindResult is not set")
	}
	return s.FindResult.Appliances, s.FindResult.Err
}

// Create is API call with trace log
func (s *LoadBalancerStub) Create(ctx context.Context, zone string, param *sacloud.LoadBalancerCreateRequest) (*sacloud.LoadBalancer, error) {
	if s.CreateResult == nil {
		log.Fatal("LoadBalancerStub.CreateResult is not set")
	}
	return s.CreateResult.Appliance, s.CreateResult.Err
}

// Read is API call with trace log
func (s *LoadBalancerStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.LoadBalancer, error) {
	if s.ReadResult == nil {
		log.Fatal("LoadBalancerStub.ReadResult is not set")
	}
	return s.ReadResult.Appliance, s.ReadResult.Err
}

// Update is API call with trace log
func (s *LoadBalancerStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.LoadBalancerUpdateRequest) (*sacloud.LoadBalancer, error) {
	if s.UpdateResult == nil {
		log.Fatal("LoadBalancerStub.UpdateResult is not set")
	}
	return s.UpdateResult.Appliance, s.UpdateResult.Err
}

// Delete is API call with trace log
func (s *LoadBalancerStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteResult == nil {
		log.Fatal("LoadBalancerStub.DeleteResult is not set")
	}
	return s.DeleteResult.Err
}

// Config is API call with trace log
func (s *LoadBalancerStub) Config(ctx context.Context, zone string, id types.ID) error {
	if s.ConfigResult == nil {
		log.Fatal("LoadBalancerStub.ConfigResult is not set")
	}
	return s.ConfigResult.Err
}

// Boot is API call with trace log
func (s *LoadBalancerStub) Boot(ctx context.Context, zone string, id types.ID) error {
	if s.BootResult == nil {
		log.Fatal("LoadBalancerStub.BootResult is not set")
	}
	return s.BootResult.Err
}

// Shutdown is API call with trace log
func (s *LoadBalancerStub) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	if s.ShutdownResult == nil {
		log.Fatal("LoadBalancerStub.ShutdownResult is not set")
	}
	return s.ShutdownResult.Err
}

// Reset is API call with trace log
func (s *LoadBalancerStub) Reset(ctx context.Context, zone string, id types.ID) error {
	if s.ResetResult == nil {
		log.Fatal("LoadBalancerStub.ResetResult is not set")
	}
	return s.ResetResult.Err
}

// MonitorInterface is API call with trace log
func (s *LoadBalancerStub) MonitorInterface(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.InterfaceActivity, error) {
	if s.MonitorInterfaceResult == nil {
		log.Fatal("LoadBalancerStub.MonitorInterfaceResult is not set")
	}
	return s.MonitorInterfaceResult.Data, s.MonitorInterfaceResult.Err
}

// Status is API call with trace log
func (s *LoadBalancerStub) Status(ctx context.Context, zone string, id types.ID) ([]*sacloud.LoadBalancerStatus, error) {
	if s.StatusResult == nil {
		log.Fatal("LoadBalancerStub.StatusResult is not set")
	}
	return s.StatusResult.LoadBalancer, s.StatusResult.Err
}

/*************************************************
* NFSStub
*************************************************/

// NFSFindResult is expected values of the Find operation
type NFSFindResult struct {
	Appliances []*sacloud.NFS
	Err        error
}

// NFSCreateResult is expected values of the Create operation
type NFSCreateResult struct {
	Appliance *sacloud.NFS
	Err       error
}

// NFSReadResult is expected values of the Read operation
type NFSReadResult struct {
	Appliance *sacloud.NFS
	Err       error
}

// NFSUpdateResult is expected values of the Update operation
type NFSUpdateResult struct {
	Appliance *sacloud.NFS
	Err       error
}

// NFSDeleteResult is expected values of the Delete operation
type NFSDeleteResult struct {
	Err error
}

// NFSBootResult is expected values of the Boot operation
type NFSBootResult struct {
	Err error
}

// NFSShutdownResult is expected values of the Shutdown operation
type NFSShutdownResult struct {
	Err error
}

// NFSResetResult is expected values of the Reset operation
type NFSResetResult struct {
	Err error
}

// NFSMonitorFreeDiskSizeResult is expected values of the MonitorFreeDiskSize operation
type NFSMonitorFreeDiskSizeResult struct {
	Data *sacloud.FreeDiskSizeActivity
	Err  error
}

// NFSMonitorInterfaceResult is expected values of the MonitorInterface operation
type NFSMonitorInterfaceResult struct {
	Data *sacloud.InterfaceActivity
	Err  error
}

// NFSStub is for trace NFSOp operations
type NFSStub struct {
	FindResult                *NFSFindResult
	CreateResult              *NFSCreateResult
	ReadResult                *NFSReadResult
	UpdateResult              *NFSUpdateResult
	DeleteResult              *NFSDeleteResult
	BootResult                *NFSBootResult
	ShutdownResult            *NFSShutdownResult
	ResetResult               *NFSResetResult
	MonitorFreeDiskSizeResult *NFSMonitorFreeDiskSizeResult
	MonitorInterfaceResult    *NFSMonitorInterfaceResult
}

// NewNFSStub creates new NFSStub instance
func NewNFSStub(caller sacloud.APICaller) sacloud.NFSAPI {
	return &NFSStub{}
}

// Find is API call with trace log
func (s *NFSStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) ([]*sacloud.NFS, error) {
	if s.FindResult == nil {
		log.Fatal("NFSStub.FindResult is not set")
	}
	return s.FindResult.Appliances, s.FindResult.Err
}

// Create is API call with trace log
func (s *NFSStub) Create(ctx context.Context, zone string, param *sacloud.NFSCreateRequest) (*sacloud.NFS, error) {
	if s.CreateResult == nil {
		log.Fatal("NFSStub.CreateResult is not set")
	}
	return s.CreateResult.Appliance, s.CreateResult.Err
}

// Read is API call with trace log
func (s *NFSStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.NFS, error) {
	if s.ReadResult == nil {
		log.Fatal("NFSStub.ReadResult is not set")
	}
	return s.ReadResult.Appliance, s.ReadResult.Err
}

// Update is API call with trace log
func (s *NFSStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.NFSUpdateRequest) (*sacloud.NFS, error) {
	if s.UpdateResult == nil {
		log.Fatal("NFSStub.UpdateResult is not set")
	}
	return s.UpdateResult.Appliance, s.UpdateResult.Err
}

// Delete is API call with trace log
func (s *NFSStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteResult == nil {
		log.Fatal("NFSStub.DeleteResult is not set")
	}
	return s.DeleteResult.Err
}

// Boot is API call with trace log
func (s *NFSStub) Boot(ctx context.Context, zone string, id types.ID) error {
	if s.BootResult == nil {
		log.Fatal("NFSStub.BootResult is not set")
	}
	return s.BootResult.Err
}

// Shutdown is API call with trace log
func (s *NFSStub) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	if s.ShutdownResult == nil {
		log.Fatal("NFSStub.ShutdownResult is not set")
	}
	return s.ShutdownResult.Err
}

// Reset is API call with trace log
func (s *NFSStub) Reset(ctx context.Context, zone string, id types.ID) error {
	if s.ResetResult == nil {
		log.Fatal("NFSStub.ResetResult is not set")
	}
	return s.ResetResult.Err
}

// MonitorFreeDiskSize is API call with trace log
func (s *NFSStub) MonitorFreeDiskSize(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.FreeDiskSizeActivity, error) {
	if s.MonitorFreeDiskSizeResult == nil {
		log.Fatal("NFSStub.MonitorFreeDiskSizeResult is not set")
	}
	return s.MonitorFreeDiskSizeResult.Data, s.MonitorFreeDiskSizeResult.Err
}

// MonitorInterface is API call with trace log
func (s *NFSStub) MonitorInterface(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.InterfaceActivity, error) {
	if s.MonitorInterfaceResult == nil {
		log.Fatal("NFSStub.MonitorInterfaceResult is not set")
	}
	return s.MonitorInterfaceResult.Data, s.MonitorInterfaceResult.Err
}

/*************************************************
* NoteStub
*************************************************/

// NoteFindResult is expected values of the Find operation
type NoteFindResult struct {
	Notes []*sacloud.Note
	Err   error
}

// NoteCreateResult is expected values of the Create operation
type NoteCreateResult struct {
	Note *sacloud.Note
	Err  error
}

// NoteReadResult is expected values of the Read operation
type NoteReadResult struct {
	Note *sacloud.Note
	Err  error
}

// NoteUpdateResult is expected values of the Update operation
type NoteUpdateResult struct {
	Note *sacloud.Note
	Err  error
}

// NoteDeleteResult is expected values of the Delete operation
type NoteDeleteResult struct {
	Err error
}

// NoteStub is for trace NoteOp operations
type NoteStub struct {
	FindResult   *NoteFindResult
	CreateResult *NoteCreateResult
	ReadResult   *NoteReadResult
	UpdateResult *NoteUpdateResult
	DeleteResult *NoteDeleteResult
}

// NewNoteStub creates new NoteStub instance
func NewNoteStub(caller sacloud.APICaller) sacloud.NoteAPI {
	return &NoteStub{}
}

// Find is API call with trace log
func (s *NoteStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) ([]*sacloud.Note, error) {
	if s.FindResult == nil {
		log.Fatal("NoteStub.FindResult is not set")
	}
	return s.FindResult.Notes, s.FindResult.Err
}

// Create is API call with trace log
func (s *NoteStub) Create(ctx context.Context, zone string, param *sacloud.NoteCreateRequest) (*sacloud.Note, error) {
	if s.CreateResult == nil {
		log.Fatal("NoteStub.CreateResult is not set")
	}
	return s.CreateResult.Note, s.CreateResult.Err
}

// Read is API call with trace log
func (s *NoteStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.Note, error) {
	if s.ReadResult == nil {
		log.Fatal("NoteStub.ReadResult is not set")
	}
	return s.ReadResult.Note, s.ReadResult.Err
}

// Update is API call with trace log
func (s *NoteStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.NoteUpdateRequest) (*sacloud.Note, error) {
	if s.UpdateResult == nil {
		log.Fatal("NoteStub.UpdateResult is not set")
	}
	return s.UpdateResult.Note, s.UpdateResult.Err
}

// Delete is API call with trace log
func (s *NoteStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteResult == nil {
		log.Fatal("NoteStub.DeleteResult is not set")
	}
	return s.DeleteResult.Err
}

/*************************************************
* ServerStub
*************************************************/

// ServerFindResult is expected values of the Find operation
type ServerFindResult struct {
	Servers []*sacloud.Server
	Err     error
}

// ServerCreateResult is expected values of the Create operation
type ServerCreateResult struct {
	Server *sacloud.Server
	Err    error
}

// ServerReadResult is expected values of the Read operation
type ServerReadResult struct {
	Server *sacloud.Server
	Err    error
}

// ServerUpdateResult is expected values of the Update operation
type ServerUpdateResult struct {
	Server *sacloud.Server
	Err    error
}

// ServerDeleteResult is expected values of the Delete operation
type ServerDeleteResult struct {
	Err error
}

// ServerChangePlanResult is expected values of the ChangePlan operation
type ServerChangePlanResult struct {
	Server *sacloud.Server
	Err    error
}

// ServerInsertCDROMResult is expected values of the InsertCDROM operation
type ServerInsertCDROMResult struct {
	Err error
}

// ServerEjectCDROMResult is expected values of the EjectCDROM operation
type ServerEjectCDROMResult struct {
	Err error
}

// ServerBootResult is expected values of the Boot operation
type ServerBootResult struct {
	Err error
}

// ServerShutdownResult is expected values of the Shutdown operation
type ServerShutdownResult struct {
	Err error
}

// ServerResetResult is expected values of the Reset operation
type ServerResetResult struct {
	Err error
}

// ServerMonitorResult is expected values of the Monitor operation
type ServerMonitorResult struct {
	Data *sacloud.CPUTimeActivity
	Err  error
}

// ServerStub is for trace ServerOp operations
type ServerStub struct {
	FindResult        *ServerFindResult
	CreateResult      *ServerCreateResult
	ReadResult        *ServerReadResult
	UpdateResult      *ServerUpdateResult
	DeleteResult      *ServerDeleteResult
	ChangePlanResult  *ServerChangePlanResult
	InsertCDROMResult *ServerInsertCDROMResult
	EjectCDROMResult  *ServerEjectCDROMResult
	BootResult        *ServerBootResult
	ShutdownResult    *ServerShutdownResult
	ResetResult       *ServerResetResult
	MonitorResult     *ServerMonitorResult
}

// NewServerStub creates new ServerStub instance
func NewServerStub(caller sacloud.APICaller) sacloud.ServerAPI {
	return &ServerStub{}
}

// Find is API call with trace log
func (s *ServerStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) ([]*sacloud.Server, error) {
	if s.FindResult == nil {
		log.Fatal("ServerStub.FindResult is not set")
	}
	return s.FindResult.Servers, s.FindResult.Err
}

// Create is API call with trace log
func (s *ServerStub) Create(ctx context.Context, zone string, param *sacloud.ServerCreateRequest) (*sacloud.Server, error) {
	if s.CreateResult == nil {
		log.Fatal("ServerStub.CreateResult is not set")
	}
	return s.CreateResult.Server, s.CreateResult.Err
}

// Read is API call with trace log
func (s *ServerStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.Server, error) {
	if s.ReadResult == nil {
		log.Fatal("ServerStub.ReadResult is not set")
	}
	return s.ReadResult.Server, s.ReadResult.Err
}

// Update is API call with trace log
func (s *ServerStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.ServerUpdateRequest) (*sacloud.Server, error) {
	if s.UpdateResult == nil {
		log.Fatal("ServerStub.UpdateResult is not set")
	}
	return s.UpdateResult.Server, s.UpdateResult.Err
}

// Delete is API call with trace log
func (s *ServerStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteResult == nil {
		log.Fatal("ServerStub.DeleteResult is not set")
	}
	return s.DeleteResult.Err
}

// ChangePlan is API call with trace log
func (s *ServerStub) ChangePlan(ctx context.Context, zone string, id types.ID, plan *sacloud.ServerChangePlanRequest) (*sacloud.Server, error) {
	if s.ChangePlanResult == nil {
		log.Fatal("ServerStub.ChangePlanResult is not set")
	}
	return s.ChangePlanResult.Server, s.ChangePlanResult.Err
}

// InsertCDROM is API call with trace log
func (s *ServerStub) InsertCDROM(ctx context.Context, zone string, id types.ID, insertParam *sacloud.InsertCDROMRequest) error {
	if s.InsertCDROMResult == nil {
		log.Fatal("ServerStub.InsertCDROMResult is not set")
	}
	return s.InsertCDROMResult.Err
}

// EjectCDROM is API call with trace log
func (s *ServerStub) EjectCDROM(ctx context.Context, zone string, id types.ID, insertParam *sacloud.EjectCDROMRequest) error {
	if s.EjectCDROMResult == nil {
		log.Fatal("ServerStub.EjectCDROMResult is not set")
	}
	return s.EjectCDROMResult.Err
}

// Boot is API call with trace log
func (s *ServerStub) Boot(ctx context.Context, zone string, id types.ID) error {
	if s.BootResult == nil {
		log.Fatal("ServerStub.BootResult is not set")
	}
	return s.BootResult.Err
}

// Shutdown is API call with trace log
func (s *ServerStub) Shutdown(ctx context.Context, zone string, id types.ID, shutdownOption *sacloud.ShutdownOption) error {
	if s.ShutdownResult == nil {
		log.Fatal("ServerStub.ShutdownResult is not set")
	}
	return s.ShutdownResult.Err
}

// Reset is API call with trace log
func (s *ServerStub) Reset(ctx context.Context, zone string, id types.ID) error {
	if s.ResetResult == nil {
		log.Fatal("ServerStub.ResetResult is not set")
	}
	return s.ResetResult.Err
}

// Monitor is API call with trace log
func (s *ServerStub) Monitor(ctx context.Context, zone string, id types.ID, condition *sacloud.MonitorCondition) (*sacloud.CPUTimeActivity, error) {
	if s.MonitorResult == nil {
		log.Fatal("ServerStub.MonitorResult is not set")
	}
	return s.MonitorResult.Data, s.MonitorResult.Err
}

/*************************************************
* SwitchStub
*************************************************/

// SwitchFindResult is expected values of the Find operation
type SwitchFindResult struct {
	Switches []*sacloud.Switch
	Err      error
}

// SwitchCreateResult is expected values of the Create operation
type SwitchCreateResult struct {
	Switch *sacloud.Switch
	Err    error
}

// SwitchReadResult is expected values of the Read operation
type SwitchReadResult struct {
	Switch *sacloud.Switch
	Err    error
}

// SwitchUpdateResult is expected values of the Update operation
type SwitchUpdateResult struct {
	Switch *sacloud.Switch
	Err    error
}

// SwitchDeleteResult is expected values of the Delete operation
type SwitchDeleteResult struct {
	Err error
}

// SwitchConnectToBridgeResult is expected values of the ConnectToBridge operation
type SwitchConnectToBridgeResult struct {
	Err error
}

// SwitchDisconnectFromBridgeResult is expected values of the DisconnectFromBridge operation
type SwitchDisconnectFromBridgeResult struct {
	Err error
}

// SwitchStub is for trace SwitchOp operations
type SwitchStub struct {
	FindResult                 *SwitchFindResult
	CreateResult               *SwitchCreateResult
	ReadResult                 *SwitchReadResult
	UpdateResult               *SwitchUpdateResult
	DeleteResult               *SwitchDeleteResult
	ConnectToBridgeResult      *SwitchConnectToBridgeResult
	DisconnectFromBridgeResult *SwitchDisconnectFromBridgeResult
}

// NewSwitchStub creates new SwitchStub instance
func NewSwitchStub(caller sacloud.APICaller) sacloud.SwitchAPI {
	return &SwitchStub{}
}

// Find is API call with trace log
func (s *SwitchStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) ([]*sacloud.Switch, error) {
	if s.FindResult == nil {
		log.Fatal("SwitchStub.FindResult is not set")
	}
	return s.FindResult.Switches, s.FindResult.Err
}

// Create is API call with trace log
func (s *SwitchStub) Create(ctx context.Context, zone string, param *sacloud.SwitchCreateRequest) (*sacloud.Switch, error) {
	if s.CreateResult == nil {
		log.Fatal("SwitchStub.CreateResult is not set")
	}
	return s.CreateResult.Switch, s.CreateResult.Err
}

// Read is API call with trace log
func (s *SwitchStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.Switch, error) {
	if s.ReadResult == nil {
		log.Fatal("SwitchStub.ReadResult is not set")
	}
	return s.ReadResult.Switch, s.ReadResult.Err
}

// Update is API call with trace log
func (s *SwitchStub) Update(ctx context.Context, zone string, id types.ID, param *sacloud.SwitchUpdateRequest) (*sacloud.Switch, error) {
	if s.UpdateResult == nil {
		log.Fatal("SwitchStub.UpdateResult is not set")
	}
	return s.UpdateResult.Switch, s.UpdateResult.Err
}

// Delete is API call with trace log
func (s *SwitchStub) Delete(ctx context.Context, zone string, id types.ID) error {
	if s.DeleteResult == nil {
		log.Fatal("SwitchStub.DeleteResult is not set")
	}
	return s.DeleteResult.Err
}

// ConnectToBridge is API call with trace log
func (s *SwitchStub) ConnectToBridge(ctx context.Context, zone string, id types.ID, bridgeID types.ID) error {
	if s.ConnectToBridgeResult == nil {
		log.Fatal("SwitchStub.ConnectToBridgeResult is not set")
	}
	return s.ConnectToBridgeResult.Err
}

// DisconnectFromBridge is API call with trace log
func (s *SwitchStub) DisconnectFromBridge(ctx context.Context, zone string, id types.ID) error {
	if s.DisconnectFromBridgeResult == nil {
		log.Fatal("SwitchStub.DisconnectFromBridgeResult is not set")
	}
	return s.DisconnectFromBridgeResult.Err
}

/*************************************************
* ZoneStub
*************************************************/

// ZoneFindResult is expected values of the Find operation
type ZoneFindResult struct {
	Zones []*sacloud.Zone
	Err   error
}

// ZoneReadResult is expected values of the Read operation
type ZoneReadResult struct {
	Zone *sacloud.Zone
	Err  error
}

// ZoneStub is for trace ZoneOp operations
type ZoneStub struct {
	FindResult *ZoneFindResult
	ReadResult *ZoneReadResult
}

// NewZoneStub creates new ZoneStub instance
func NewZoneStub(caller sacloud.APICaller) sacloud.ZoneAPI {
	return &ZoneStub{}
}

// Find is API call with trace log
func (s *ZoneStub) Find(ctx context.Context, zone string, conditions *sacloud.FindCondition) ([]*sacloud.Zone, error) {
	if s.FindResult == nil {
		log.Fatal("ZoneStub.FindResult is not set")
	}
	return s.FindResult.Zones, s.FindResult.Err
}

// Read is API call with trace log
func (s *ZoneStub) Read(ctx context.Context, zone string, id types.ID) (*sacloud.Zone, error) {
	if s.ReadResult == nil {
		log.Fatal("ZoneStub.ReadResult is not set")
	}
	return s.ReadResult.Zone, s.ReadResult.Err
}
