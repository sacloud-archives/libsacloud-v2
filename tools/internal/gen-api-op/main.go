package main

import (
	"fmt"
	"log"
	"path/filepath"

	"github.com/sacloud/libsacloud-v2/define"
	"github.com/sacloud/libsacloud-v2/tools/internal"
)

const destination = "sacloud/zz_%s_op.go"

func init() {
	log.SetFlags(0)
	log.SetPrefix("gen-api-op: ")
}

func main() {
	for _, resource := range define.Resources {

		outputPath := fmt.Sprintf(destination, resource.LowerName())

		internal.WriteFileWithTemplate(&internal.TemplateConfig{
			OutputPath: filepath.Join(internal.ProjectRootPath(), outputPath),
			Template:   tmpl,
			Parameter:  resource,
		})
		log.Printf("generated: %s\n", outputPath)

	}

}

const tmpl = `// generated by 'github.com/sacloud/libsacloud/tools/internal/gen-api-op'; DO NOT EDIT

package sacloud

import (
{{ range .ImportStatements -}}
	{{ . }}
{{ end -}}
	"encoding/json"
)

// {{ .Name }}Op implements {{ .Name }}API interface
type {{ .Name }}Op struct{
	// Client APICaller
    Client APICaller
	// PathSuffix is used when building URL
	PathSuffix string
	// PathName is used when building URL
	PathName string
}

// New{{ .Name }}Op creates new {{ .Name }}Op instance
func New{{ .Name }}Op(client APICaller) *{{ .Name }}Op {
	return &{{ .Name }}Op {
    	Client: client,
		PathSuffix: "{{$.PathSuffix}}",
		PathName: "{{$.PathName}}",
	}
}

{{ range .Operations }}{{$returnErrStatement := .ReturnErrorStatement}}{{ $operationName := .Name }}
// {{ .Name }} is API call
func (o *{{ $.Name }}Op) {{ .Name }}(ctx context.Context{{ range .Arguments }}, {{ .Name }} {{ .TypeName }}{{ end }}) ({{ range .Results }}{{ .TypeName }}, {{ end }}) {
	url, err := buildURL("{{.GetPathFormat}}", map[string]interface{}{
		"rootURL": SakuraCloudAPIRoot,
		"pathSuffix": o.PathSuffix,
		"pathName": o.PathName,
		{{- range .Arguments }}
		"{{.Name}}": {{.Name}},
		{{- end }}
	})
	if err != nil {
		return {{ $returnErrStatement }}
	}

	var body interface{}
	{{ range .TypePtrArguments }}
	{
		n, err := {{.Name}}.ToNaked()
		if err != nil {
			return {{ $returnErrStatement }}
		}
		body = &Naked{{ $.Name }}{{ $operationName }}Request {
			{{.FieldName}}: n, 
		}
	}
	{{ end }}

	data, err := o.Client.Do(ctx, "{{.Method}}", url, body)
	if err != nil {
		return {{ $returnErrStatement }}
	}

	nakedResponse := &Naked{{ $.Name }}{{ .Name }}Response{}
	if err := json.Unmarshal(data, nakedResponse); err != nil {
		return {{ $returnErrStatement }}
	}

	{{ range $i,$v := .ResultsWithoutError -}}
	response{{$i}} := {{$v.ZeroInitializer}}
	if err := response{{$i}}.ParseNaked(nakedResponse.{{.FieldName}}); err != nil {
		return {{ $returnErrStatement }}
	}
	{{ end -}}

	return {{range $i,$v := .ResultsWithoutError}}response{{$i}},{{ end }} nil
}
{{- end -}}
`
