package main

import (
	"log"
	"path/filepath"

	"github.com/sacloud/libsacloud-v2/internal/define"
	"github.com/sacloud/libsacloud-v2/internal/tools"
)

const destination = "sacloud/zz_models.go"

func init() {
	log.SetFlags(0)
	log.SetPrefix("gen-api-models: ")
}

func main() {
	outputPath := destination
	tools.WriteFileWithTemplate(&tools.TemplateConfig{
		OutputPath: filepath.Join(tools.ProjectRootPath(), outputPath),
		Template:   tmpl,
		Parameter:  define.Resources,
	})
	log.Printf("generated: %s\n", outputPath)
}

const tmpl = `// generated by 'github.com/sacloud/libsacloud/internal/tools/gen-api-models'; DO NOT EDIT

package sacloud

import (
{{- range .ImportStatementsForModelDef "github.com/sacloud/libsacloud-v2/pkg/mapconv" }}
	{{ . }}
{{- end }}
)

{{ range .Models }}

/************************************************* 
* {{.Name}}
*************************************************/

// {{ .Name }} represents API parameter/response structure
type {{ .Name }} struct {
	{{- range .Fields }}
	{{.Name}} {{.TypeName}} {{if .HasTag }}` + "`" + `{{.TagString}}` + "`" + `{{end}}
	{{- end }}
}

{{- $struct := .Name -}}
{{- range .Fields }}
{{- if not .SuppressAccessorGen }}
// Get{{.Name}} returns value of {{.Name}} 
func (o *{{ $struct }}) Get{{.Name}}() {{.TypeName}} {
	return o.{{.Name}}
}

// Set{{.Name}} sets value to {{.Name}} 
func (o *{{ $struct }}) Set{{.Name}}(v {{.TypeName}}) {
	o.{{.Name}} = v
}
{{- end }}
{{- end }}

{{- if .HasNakedType }}
// ToNaked returns naked {{.Name}} 
func (o *{{ .Name }}) ToNaked() ({{.NakedType.GoTypeSourceCode}}, error) {
	dest := {{.NakedType.ZeroInitializeSourceCode}}
	err := mapconv.ToNaked(o, dest)
	return dest, err
}

// ParseNaked parse values from naked {{.Name}}
func (o *{{ .Name }}) ParseNaked(naked {{.NakedType.GoTypeSourceCode}}) error {
	return mapconv.FromNaked(naked, o)
}

{{- end }}
{{- end }}
`
